---
import Layout from "../../layouts/Layout.astro";
---

<Layout title="004 | Pattern">
    <main class="w-screen h-dvh flex items-center justify-center">
        <div
            class="absolute w-96 h-96 border border-black flex items-center justify-center overflow-hidden cursor-grab"
            id="draggable"
        >
            <div class="pattern w-screen h-screen fixed flex" id="pattern">
            </div>
        </div>
    </main>
</Layout>

<style>
    @keyframes pan {
        0% {
            background-position: 0% 0%;
        }
        100% {
            background-position: -100% 100%;
        }
    }

    .pattern {
        background-image: url('data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20"%3E%3Ctext x="10" y="10" font-size="7" fill="%234d4d4d" text-anchor="middle" dominant-baseline="middle"%3E%2B%3C/text%3E%3C/svg%3E');
        background-size: 40px 40px;
        animation: pan 120s linear infinite;
    }

    #draggable {
        position: absolute;
        transform: translate(0, 0);
    }
</style>

<script>
    const draggable = document.getElementById("draggable");
    const pattern = document.getElementById("pattern");

    let isDragging = false;
    let startX, startY, initialX, initialY;

    function startDragging(x, y) {
        isDragging = true;
        draggable.style.cursor = "grabbing";
        startX = x;
        startY = y;

        const transform = window.getComputedStyle(draggable).transform;

        if (transform !== "none") {
            const matrix = transform.match(/matrix.*\((.+)\)/)[1].split(", ");
            initialX = parseFloat(matrix[4]);
            initialY = parseFloat(matrix[5]);
        } else {
            initialX = 0;
            initialY = 0;
        }
    }

    function drag(x, y) {
        if (!isDragging) return;

        const dx = x - startX;
        const dy = y - startY;

        draggable.style.transform = `translate(${initialX + dx}px, ${initialY + dy}px)`;
        pattern.style.transform = `translate(${-1 * (initialX + dx)}px, ${-1 * (initialY + dy)}px)`;
    }

    function stopDragging() {
        isDragging = false;
        draggable.style.cursor = "grab";
    }

    draggable.addEventListener("mousedown", (e) => {
        startDragging(e.clientX, e.clientY);
        e.preventDefault();
    });

    window.addEventListener("mousemove", (e) => {
        drag(e.clientX, e.clientY);
    });

    window.addEventListener("mouseup", stopDragging);

    draggable.addEventListener("touchstart", (e) => {
        const touch = e.touches[0];
        startDragging(touch.clientX, touch.clientY);
        e.preventDefault();
    });

    window.addEventListener("touchmove", (e) => {
        const touch = e.touches[0];
        drag(touch.clientX, touch.clientY);
    });

    window.addEventListener("touchend", stopDragging);
</script>
